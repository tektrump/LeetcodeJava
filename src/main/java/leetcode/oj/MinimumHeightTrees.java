package leetcode.oj;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import leetcode.util.ArrayUtil;

public abstract class MinimumHeightTrees {
	
	public abstract List<Integer> findMinHeightTrees(int n, int[][] edges);
	public static void main(String[] args) {
		MinimumHeightTrees instance = new SolutionIII();
		int n;
		int[][] edges;
		String s;
		List<Integer> results;
		
		// [1]
//		n = 4;
//		s = "[[1, 0], [1, 2], [1, 3]]";
		
		// [3,4]
//		n = 6;
//		s = "[[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]";
		
//		n = 1212;
//		s = "[[0,1],[0,2],[1,3],[1,4],[4,5],[4,6],[6,7],[5,8],[7,9],[1,10],[1,11],[2,12],[9,13],[13,14],[0,15],[10,16],[7,17],[8,18],[2,19],[6,20],[10,21],[5,22],[16,23],[20,24],[0,25],[7,26],[20,27],[11,28],[23,29],[16,30],[27,31],[4,32],[26,33],[21,34],[24,35],[0,36],[16,37],[9,38],[8,39],[19,40],[10,41],[39,42],[39,43],[42,44],[27,45],[4,46],[3,47],[39,48],[0,49],[40,50],[45,51],[21,52],[33,53],[40,54],[40,55],[7,56],[23,57],[9,58],[3,59],[35,60],[32,61],[56,62],[59,63],[9,64],[41,65],[58,66],[64,67],[54,68],[23,69],[21,70],[65,71],[22,72],[40,73],[16,74],[56,75],[62,76],[32,77],[17,78],[66,79],[24,80],[7,81],[29,82],[8,83],[80,84],[10,85],[16,86],[68,87],[83,88],[42,89],[40,90],[23,91],[7,92],[82,93],[66,94],[84,95],[23,96],[22,97],[11,98],[60,99],[11,100],[15,101],[67,102],[98,103],[51,104],[38,105],[94,106],[33,107],[92,108],[96,109],[104,110],[85,111],[75,112],[66,113],[108,114],[83,115],[71,116],[65,117],[92,118],[10,119],[35,120],[14,121],[98,122],[63,123],[93,124],[65,125],[24,126],[7,127],[13,128],[63,129],[111,130],[106,131],[73,132],[123,133],[12,134],[73,135],[72,136],[98,137],[42,138],[0,139],[13,140],[67,141],[112,142],[67,143],[55,144],[141,145],[1,146],[121,147],[70,148],[74,149],[149,150],[127,151],[4,152],[51,153],[135,154],[77,155],[47,156],[146,157],[72,158],[108,159],[39,160],[65,161],[157,162],[109,163],[65,164],[110,165],[106,166],[84,167],[22,168],[96,169],[32,170],[14,171],[86,172],[47,173],[36,174],[92,175],[110,176],[38,177],[54,178],[51,179],[53,180],[135,181],[165,182],[178,183],[154,184],[171,185],[155,186],[19,187],[163,188],[163,189],[188,190],[16,191],[73,192],[68,193],[38,194],[180,195],[120,196],[54,197],[9,198],[86,199],[19,200],[73,201],[2,202],[156,203],[170,204],[165,205],[10,206],[62,207],[100,208],[132,209],[47,210],[123,211],[175,212],[200,213],[6,214],[0,215],[8,216],[179,217],[109,218],[126,219],[151,220],[109,221],[63,222],[68,223],[140,224],[65,225],[55,226],[75,227],[32,228],[1,229],[93,230],[13,231],[219,232],[110,233],[48,234],[17,235],[24,236],[127,237],[43,238],[130,239],[14,240],[135,241],[154,242],[44,243],[130,244],[183,245],[143,246],[70,247],[146,248],[151,249],[187,250],[73,251],[5,252],[80,253],[168,254],[32,255],[240,256],[250,257],[207,258],[202,259],[151,260],[236,261],[153,262],[55,263],[121,264],[141,265],[37,266],[73,267],[6,268],[35,269],[217,270],[234,271],[128,272],[84,273],[73,274],[105,275],[141,276],[149,277],[265,278],[26,279],[213,280],[219,281],[157,282],[171,283],[31,284],[284,285],[8,286],[112,287],[264,288],[252,289],[225,290],[255,291],[287,292],[43,293],[2,294],[14,295],[106,296],[275,297],[104,298],[210,299],[66,300],[117,301],[116,302],[279,303],[61,304],[198,305],[198,306],[190,307],[8,308],[47,309],[288,310],[211,311],[261,312],[312,313],[38,314],[101,315],[251,316],[285,317],[192,318],[269,319],[137,320],[282,321],[68,322],[24,323],[194,324],[85,325],[261,326],[315,327],[57,328],[80,329],[93,330],[241,331],[166,332],[236,333],[62,334],[291,335],[217,336],[152,337],[132,338],[64,339],[123,340],[129,341],[165,342],[18,343],[341,344],[39,345],[76,346],[60,347],[132,348],[156,349],[346,350],[113,351],[283,352],[153,353],[256,354],[305,355],[234,356],[72,357],[312,358],[286,359],[259,360],[170,361],[213,362],[162,363],[261,364],[109,365],[139,366],[349,367],[57,368],[245,369],[56,370],[71,371],[314,372],[138,373],[273,374],[241,375],[217,376],[326,377],[23,378],[141,379],[149,380],[296,381],[78,382],[38,383],[258,384],[90,385],[30,386],[214,387],[245,388],[252,389],[47,390],[234,391],[76,392],[220,393],[194,394],[172,395],[122,396],[36,397],[341,398],[51,399],[225,400],[303,401],[69,402],[150,403],[118,404],[38,405],[398,406],[135,407],[231,408],[322,409],[120,410],[272,411],[332,412],[259,413],[80,414],[153,415],[67,416],[416,417],[414,418],[166,419],[301,420],[127,421],[262,422],[152,423],[407,424],[412,425],[288,426],[23,427],[315,428],[163,429],[316,430],[193,431],[4,432],[415,433],[118,434],[69,435],[413,436],[107,437],[390,438],[117,439],[296,440],[437,441],[312,442],[356,443],[68,444],[212,445],[131,446],[36,447],[417,448],[122,449],[294,450],[408,451],[104,452],[196,453],[27,454],[361,455],[136,456],[127,457],[350,458],[188,459],[55,460],[39,461],[70,462],[78,463],[87,464],[402,465],[306,466],[50,467],[48,468],[420,469],[196,470],[201,471],[154,472],[46,473],[340,474],[107,475],[137,476],[448,477],[204,478],[212,479],[257,480],[195,481],[193,482],[391,483],[45,484],[339,485],[156,486],[263,487],[444,488],[445,489],[264,490],[270,491],[134,492],[368,493],[195,494],[302,495],[397,496],[29,497],[437,498],[65,499],[103,500],[9,501],[299,502],[408,503],[249,504],[330,505],[493,506],[92,507],[354,508],[15,509],[124,510],[68,511],[1,512],[316,513],[374,514],[206,515],[499,516],[241,517],[116,518],[461,519],[294,520],[90,521],[231,522],[188,523],[220,524],[342,525],[122,526],[19,527],[347,528],[403,529],[38,530],[308,531],[78,532],[67,533],[445,534],[172,535],[88,536],[98,537],[197,538],[73,539],[405,540],[435,541],[135,542],[525,543],[534,544],[167,545],[353,546],[20,547],[532,548],[351,549],[252,550],[55,551],[419,552],[370,553],[431,554],[522,555],[116,556],[126,557],[121,558],[354,559],[468,560],[552,561],[219,562],[84,563],[390,564],[155,565],[446,566],[154,567],[292,568],[199,569],[428,570],[467,571],[437,572],[70,573],[509,574],[17,575],[18,576],[173,577],[356,578],[157,579],[443,580],[278,581],[352,582],[105,583],[71,584],[280,585],[256,586],[574,587],[496,588],[132,589],[255,590],[223,591],[381,592],[82,593],[300,594],[142,595],[249,596],[287,597],[323,598],[107,599],[384,600],[299,601],[362,602],[224,603],[34,604],[548,605],[420,606],[65,607],[416,608],[67,609],[414,610],[226,611],[572,612],[564,613],[244,614],[472,615],[109,616],[95,617],[297,618],[202,619],[175,620],[9,621],[285,622],[82,623],[473,624],[170,625],[30,626],[527,627],[128,628],[79,629],[339,630],[582,631],[481,632],[80,633],[39,634],[588,635],[632,636],[422,637],[174,638],[10,639],[164,640],[305,641],[361,642],[441,643],[627,644],[63,645],[133,646],[582,647],[618,648],[13,649],[391,650],[336,651],[649,652],[509,653],[27,654],[21,655],[221,656],[517,657],[75,658],[432,659],[232,660],[388,661],[111,662],[598,663],[523,664],[656,665],[192,666],[261,667],[535,668],[635,669],[401,670],[37,671],[129,672],[643,673],[583,674],[310,675],[463,676],[461,677],[440,678],[420,679],[649,680],[646,681],[388,682],[101,683],[602,684],[358,685],[189,686],[427,687],[461,688],[566,689],[556,690],[629,691],[239,692],[454,693],[653,694],[93,695],[489,696],[307,697],[53,698],[403,699],[639,700],[39,701],[474,702],[518,703],[28,704],[590,705],[285,706],[244,707],[26,708],[46,709],[546,710],[508,711],[391,712],[631,713],[332,714],[246,715],[146,716],[57,717],[108,718],[225,719],[139,720],[104,721],[4,722],[267,723],[638,724],[615,725],[505,726],[127,727],[631,728],[15,729],[728,730],[321,731],[236,732],[333,733],[303,734],[390,735],[632,736],[77,737],[28,738],[195,739],[175,740],[687,741],[735,742],[265,743],[391,744],[733,745],[408,746],[580,747],[501,748],[195,749],[61,750],[515,751],[94,752],[162,753],[695,754],[665,755],[666,756],[346,757],[708,758],[758,759],[490,760],[65,761],[394,762],[278,763],[462,764],[645,765],[393,766],[363,767],[154,768],[422,769],[726,770],[275,771],[682,772],[698,773],[659,774],[619,775],[101,776],[247,777],[218,778],[421,779],[195,780],[366,781],[220,782],[708,783],[88,784],[321,785],[777,786],[105,787],[477,788],[234,789],[625,790],[344,791],[406,792],[546,793],[56,794],[437,795],[41,796],[278,797],[123,798],[397,799],[101,800],[301,801],[581,802],[118,803],[547,804],[40,805],[365,806],[151,807],[207,808],[495,809],[533,810],[804,811],[809,812],[47,813],[504,814],[223,815],[45,816],[648,817],[226,818],[361,819],[201,820],[745,821],[701,822],[671,823],[62,824],[477,825],[476,826],[742,827],[25,828],[524,829],[441,830],[269,831],[574,832],[420,833],[767,834],[752,835],[714,836],[764,837],[498,838],[402,839],[23,840],[406,841],[121,842],[648,843],[633,844],[619,845],[478,846],[439,847],[323,848],[352,849],[51,850],[236,851],[624,852],[42,853],[460,854],[151,855],[406,856],[752,857],[664,858],[759,859],[263,860],[284,861],[774,862],[534,863],[552,864],[43,865],[551,866],[16,867],[655,868],[795,869],[376,870],[253,871],[825,872],[785,873],[664,874],[341,875],[840,876],[205,877],[664,878],[491,879],[75,880],[495,881],[690,882],[374,883],[460,884],[62,885],[230,886],[58,887],[675,888],[797,889],[59,890],[45,891],[589,892],[563,893],[224,894],[738,895],[680,896],[523,897],[662,898],[256,899],[498,900],[285,901],[891,902],[233,903],[410,904],[317,905],[621,906],[470,907],[470,908],[421,909],[732,910],[692,911],[27,912],[287,913],[311,914],[397,915],[639,916],[622,917],[554,918],[60,919],[601,920],[570,921],[517,922],[405,923],[840,924],[90,925],[738,926],[668,927],[65,928],[923,929],[266,930],[211,931],[252,932],[40,933],[40,934],[295,935],[301,936],[868,937],[425,938],[530,939],[123,940],[857,941],[823,942],[379,943],[567,944],[135,945],[448,946],[31,947],[507,948],[681,949],[237,950],[243,951],[747,952],[659,953],[436,954],[135,955],[704,956],[695,957],[89,958],[69,959],[248,960],[596,961],[635,962],[579,963],[831,964],[280,965],[712,966],[862,967],[759,968],[825,969],[102,970],[802,971],[164,972],[276,973],[970,974],[705,975],[226,976],[449,977],[577,978],[393,979],[47,980],[359,981],[615,982],[173,983],[918,984],[756,985],[731,986],[812,987],[322,988],[583,989],[131,990],[812,991],[753,992],[712,993],[826,994],[914,995],[460,996],[984,997],[931,998],[372,999],[916,1000],[59,1001],[530,1002],[278,1003],[979,1004],[85,1005],[705,1006],[350,1007],[465,1008],[161,1009],[246,1010],[525,1011],[146,1012],[797,1013],[684,1014],[961,1015],[525,1016],[946,1017],[973,1018],[1014,1019],[996,1020],[436,1021],[416,1022],[902,1023],[161,1024],[438,1025],[492,1026],[746,1027],[467,1028],[967,1029],[376,1030],[550,1031],[479,1032],[138,1033],[690,1034],[157,1035],[645,1036],[969,1037],[459,1038],[968,1039],[135,1040],[442,1041],[846,1042],[75,1043],[418,1044],[741,1045],[529,1046],[1013,1047],[845,1048],[376,1049],[876,1050],[945,1051],[679,1052],[118,1053],[351,1054],[186,1055],[662,1056],[55,1057],[897,1058],[150,1059],[732,1060],[647,1061],[824,1062],[136,1063],[84,1064],[9,1065],[234,1066],[656,1067],[147,1068],[399,1069],[875,1070],[962,1071],[905,1072],[950,1073],[433,1074],[219,1075],[190,1076],[809,1077],[163,1078],[689,1079],[713,1080],[844,1081],[630,1082],[971,1083],[536,1084],[992,1085],[579,1086],[1024,1087],[843,1088],[556,1089],[241,1090],[613,1091],[268,1092],[789,1093],[837,1094],[595,1095],[432,1096],[470,1097],[392,1098],[560,1099],[1083,1100],[1013,1101],[231,1102],[857,1103],[74,1104],[964,1105],[395,1106],[606,1107],[110,1108],[149,1109],[904,1110],[146,1111],[150,1112],[243,1113],[878,1114],[464,1115],[273,1116],[391,1117],[430,1118],[692,1119],[242,1120],[868,1121],[613,1122],[592,1123],[813,1124],[508,1125],[135,1126],[563,1127],[183,1128],[1096,1129],[1111,1130],[685,1131],[810,1132],[550,1133],[1,1134],[187,1135],[447,1136],[45,1137],[547,1138],[649,1139],[1126,1140],[54,1141],[243,1142],[141,1143],[1079,1144],[183,1145],[660,1146],[494,1147],[152,1148],[259,1149],[723,1150],[414,1151],[910,1152],[975,1153],[785,1154],[922,1155],[648,1156],[563,1157],[765,1158],[375,1159],[388,1160],[945,1161],[442,1162],[560,1163],[1097,1164],[1083,1165],[400,1166],[5,1167],[299,1168],[3,1169],[1045,1170],[552,1171],[597,1172],[1025,1173],[693,1174],[924,1175],[409,1176],[1170,1177],[63,1178],[146,1179],[503,1180],[1121,1181],[956,1182],[741,1183],[388,1184],[360,1185],[189,1186],[591,1187],[538,1188],[651,1189],[476,1190],[870,1191],[484,1192],[1101,1193],[837,1194],[489,1195],[366,1196],[1049,1197],[93,1198],[844,1199],[739,1200],[175,1201],[1061,1202],[330,1203],[1,1204],[1097,1205],[784,1206],[807,1207],[1024,1208],[953,1209],[408,1210],[340,1211]]";
		
		n = 1111;
		s = "[[0,1],[0,2],[0,3],[2,4],[0,5],[1,6],[3,7],[2,8],[1,9],[4,10],[7,11],[8,12],[12,13],[2,14],[3,15],[10,16],[12,17],[4,18],[18,19],[19,20],[20,21],[18,22],[4,23],[22,24],[10,25],[4,26],[4,27],[19,28],[0,29],[19,30],[27,31],[13,32],[11,33],[10,34],[1,35],[24,36],[35,37],[23,38],[33,39],[29,40],[17,41],[28,42],[6,43],[42,44],[44,45],[3,46],[18,47],[29,48],[4,49],[47,50],[5,51],[19,52],[37,53],[46,54],[11,55],[13,56],[24,57],[48,58],[5,59],[3,60],[10,61],[31,62],[14,63],[49,64],[15,65],[14,66],[39,67],[8,68],[15,69],[52,70],[26,71],[37,72],[42,73],[20,74],[51,75],[13,76],[2,77],[2,78],[51,79],[33,80],[79,81],[40,82],[82,83],[63,84],[4,85],[67,86],[25,87],[86,88],[14,89],[43,90],[40,91],[38,92],[64,93],[71,94],[21,95],[75,96],[29,97],[11,98],[26,99],[0,100],[96,101],[91,102],[79,103],[81,104],[69,105],[10,106],[89,107],[46,108],[22,109],[18,110],[92,111],[43,112],[96,113],[17,114],[4,115],[20,116],[78,117],[63,118],[48,119],[14,120],[64,121],[73,122],[47,123],[1,124],[18,125],[9,126],[123,127],[15,128],[66,129],[129,130],[66,131],[116,132],[126,133],[37,134],[125,135],[30,136],[103,137],[88,138],[90,139],[99,140],[60,141],[90,142],[86,143],[127,144],[99,145],[41,146],[34,147],[112,148],[53,149],[131,150],[10,151],[121,152],[42,153],[122,154],[154,155],[95,156],[21,157],[117,158],[97,159],[147,160],[87,161],[12,162],[36,163],[160,164],[116,165],[133,166],[116,167],[47,168],[82,169],[112,170],[91,171],[58,172],[156,173],[97,174],[6,175],[32,176],[115,177],[52,178],[128,179],[154,180],[135,181],[47,182],[74,183],[2,184],[101,185],[37,186],[2,187],[92,188],[116,189],[40,190],[112,191],[5,192],[160,193],[103,194],[176,195],[45,196],[80,197],[41,198],[100,199],[2,200],[168,201],[186,202],[202,203],[179,204],[117,205],[67,206],[170,207],[131,208],[13,209],[155,210],[51,211],[34,212],[75,213],[183,214],[172,215],[23,216],[200,217],[1,218],[81,219],[52,220],[37,221],[73,222],[48,223],[155,224],[109,225],[38,226],[52,227],[182,228],[99,229],[228,230],[116,231],[17,232],[29,233],[76,234],[78,235],[100,236],[68,237],[225,238],[178,239],[204,240],[205,241],[138,242],[94,243],[228,244],[88,245],[106,246],[220,247],[114,248],[224,249],[118,250],[53,251],[32,252],[69,253],[235,254],[61,255],[149,256],[130,257],[70,258],[65,259],[115,260],[134,261],[256,262],[229,263],[73,264],[1,265],[191,266],[0,267],[107,268],[94,269],[141,270],[129,271],[31,272],[266,273],[112,274],[117,275],[225,276],[147,277],[139,278],[178,279],[72,280],[241,281],[271,282],[88,283],[11,284],[36,285],[101,286],[236,287],[161,288],[70,289],[272,290],[108,291],[172,292],[291,293],[112,294],[111,295],[190,296],[176,297],[191,298],[223,299],[55,300],[147,301],[52,302],[127,303],[16,304],[133,305],[294,306],[123,307],[232,308],[163,309],[7,310],[288,311],[132,312],[300,313],[154,314],[171,315],[169,316],[304,317],[122,318],[289,319],[282,320],[122,321],[196,322],[4,323],[302,324],[255,325],[110,326],[262,327],[59,328],[193,329],[185,330],[42,331],[81,332],[84,333],[312,334],[113,335],[82,336],[63,337],[8,338],[299,339],[154,340],[255,341],[193,342],[100,343],[260,344],[102,345],[300,346],[85,347],[103,348],[5,349],[343,350],[18,351],[39,352],[86,353],[180,354],[39,355],[52,356],[191,357],[331,358],[170,359],[262,360],[205,361],[38,362],[63,363],[300,364],[79,365],[322,366],[224,367],[26,368],[173,369],[172,370],[305,371],[249,372],[182,373],[161,374],[128,375],[26,376],[37,377],[11,378],[152,379],[180,380],[356,381],[144,382],[95,383],[204,384],[130,385],[134,386],[204,387],[362,388],[111,389],[21,390],[258,391],[369,392],[77,393],[50,394],[268,395],[232,396],[7,397],[235,398],[41,399],[172,400],[67,401],[370,402],[249,403],[83,404],[140,405],[360,406],[387,407],[147,408],[275,409],[14,410],[306,411],[256,412],[168,413],[399,414],[328,415],[332,416],[21,417],[8,418],[340,419],[337,420],[113,421],[212,422],[253,423],[1,424],[14,425],[8,426],[266,427],[277,428],[370,429],[394,430],[285,431],[428,432],[386,433],[66,434],[29,435],[340,436],[430,437],[188,438],[205,439],[347,440],[380,441],[395,442],[231,443],[163,444],[398,445],[325,446],[410,447],[108,448],[298,449],[398,450],[187,451],[444,452],[145,453],[297,454],[235,455],[249,456],[154,457],[357,458],[319,459],[179,460],[435,461],[385,462],[32,463],[285,464],[77,465],[92,466],[382,467],[458,468],[67,469],[198,470],[42,471],[205,472],[202,473],[20,474],[203,475],[330,476],[56,477],[244,478],[390,479],[240,480],[352,481],[16,482],[401,483],[11,484],[227,485],[453,486],[419,487],[271,488],[254,489],[1,490],[224,491],[87,492],[309,493],[266,494],[327,495],[437,496],[30,497],[252,498],[348,499],[3,500],[7,501],[77,502],[103,503],[359,504],[310,505],[97,506],[141,507],[244,508],[455,509],[467,510],[318,511],[437,512],[465,513],[62,514],[217,515],[174,516],[307,517],[487,518],[500,519],[301,520],[250,521],[138,522],[41,523],[368,524],[376,525],[500,526],[318,527],[182,528],[12,529],[306,530],[493,531],[514,532],[184,533],[191,534],[178,535],[331,536],[522,537],[246,538],[70,539],[169,540],[157,541],[406,542],[447,543],[307,544],[70,545],[378,546],[117,547],[426,548],[169,549],[424,550],[233,551],[424,552],[484,553],[2,554],[123,555],[19,556],[379,557],[82,558],[207,559],[453,560],[168,561],[338,562],[89,563],[407,564],[164,565],[547,566],[441,567],[198,568],[435,569],[107,570],[90,571],[150,572],[274,573],[92,574],[562,575],[314,576],[524,577],[159,578],[20,579],[38,580],[75,581],[475,582],[248,583],[108,584],[72,585],[145,586],[258,587],[234,588],[554,589],[314,590],[436,591],[197,592],[45,593],[559,594],[398,595],[539,596],[71,597],[219,598],[399,599],[179,600],[100,601],[30,602],[505,603],[518,604],[146,605],[193,606],[481,607],[309,608],[234,609],[508,610],[509,611],[514,612],[361,613],[349,614],[295,615],[333,616],[509,617],[255,618],[396,619],[439,620],[439,621],[436,622],[255,623],[332,624],[159,625],[276,626],[152,627],[517,628],[493,629],[389,630],[291,631],[448,632],[157,633],[147,634],[416,635],[345,636],[595,637],[310,638],[310,639],[40,640],[228,641],[91,642],[512,643],[119,644],[285,645],[254,646],[388,647],[534,648],[378,649],[632,650],[44,651],[78,652],[574,653],[101,654],[225,655],[60,656],[652,657],[379,658],[70,659],[209,660],[253,661],[180,662],[336,663],[663,664],[459,665],[658,666],[116,667],[575,668],[391,669],[410,670],[447,671],[663,672],[547,673],[275,674],[608,675],[256,676],[265,677],[468,678],[159,679],[164,680],[63,681],[35,682],[89,683],[393,684],[569,685],[92,686],[309,687],[586,688],[492,689],[9,690],[73,691],[400,692],[126,693],[383,694],[643,695],[557,696],[622,697],[251,698],[65,699],[301,700],[130,701],[180,702],[572,703],[261,704],[22,705],[646,706],[680,707],[485,708],[306,709],[622,710],[456,711],[299,712],[310,713],[607,714],[347,715],[250,716],[353,717],[662,718],[151,719],[554,720],[562,721],[384,722],[359,723],[584,724],[616,725],[611,726],[638,727],[254,728],[666,729],[77,730],[86,731],[206,732],[206,733],[336,734],[502,735],[119,736],[416,737],[474,738],[226,739],[374,740],[215,741],[400,742],[225,743],[663,744],[562,745],[424,746],[385,747],[444,748],[243,749],[663,750],[311,751],[415,752],[739,753],[412,754],[591,755],[459,756],[409,757],[673,758],[259,759],[614,760],[637,761],[312,762],[47,763],[74,764],[700,765],[326,766],[647,767],[369,768],[43,769],[502,770],[197,771],[760,772],[426,773],[83,774],[229,775],[627,776],[501,777],[405,778],[364,779],[343,780],[761,781],[404,782],[22,783],[430,784],[436,785],[669,786],[170,787],[177,788],[323,789],[390,790],[141,791],[680,792],[420,793],[653,794],[44,795],[209,796],[573,797],[212,798],[450,799],[343,800],[766,801],[50,802],[385,803],[594,804],[572,805],[739,806],[600,807],[588,808],[507,809],[664,810],[737,811],[704,812],[354,813],[451,814],[771,815],[140,816],[459,817],[628,818],[369,819],[352,820],[756,821],[495,822],[594,823],[329,824],[20,825],[706,826],[23,827],[12,828],[643,829],[216,830],[98,831],[588,832],[816,833],[659,834],[447,835],[764,836],[769,837],[429,838],[528,839],[103,840],[397,841],[634,842],[584,843],[494,844],[48,845],[157,846],[327,847],[266,848],[92,849],[637,850],[593,851],[310,852],[424,853],[535,854],[326,855],[5,856],[210,857],[666,858],[38,859],[478,860],[38,861],[7,862],[367,863],[534,864],[123,865],[363,866],[585,867],[319,868],[316,869],[407,870],[10,871],[621,872],[827,873],[815,874],[588,875],[581,876],[371,877],[294,878],[853,879],[639,880],[238,881],[755,882],[525,883],[478,884],[339,885],[869,886],[364,887],[824,888],[1,889],[385,890],[737,891],[552,892],[97,893],[64,894],[882,895],[759,896],[740,897],[396,898],[444,899],[113,900],[348,901],[440,902],[464,903],[549,904],[813,905],[818,906],[23,907],[58,908],[142,909],[739,910],[700,911],[365,912],[847,913],[862,914],[472,915],[365,916],[255,917],[804,918],[711,919],[21,920],[918,921],[411,922],[893,923],[812,924],[183,925],[78,926],[347,927],[244,928],[667,929],[282,930],[276,931],[473,932],[886,933],[295,934],[312,935],[761,936],[117,937],[267,938],[52,939],[576,940],[695,941],[879,942],[465,943],[282,944],[720,945],[222,946],[80,947],[885,948],[239,949],[429,950],[668,951],[794,952],[774,953],[910,954],[911,955],[424,956],[886,957],[876,958],[88,959],[720,960],[320,961],[295,962],[773,963],[756,964],[355,965],[415,966],[765,967],[711,968],[884,969],[874,970],[776,971],[167,972],[469,973],[653,974],[725,975],[824,976],[53,977],[281,978],[26,979],[92,980],[524,981],[602,982],[166,983],[969,984],[252,985],[275,986],[961,987],[643,988],[88,989],[989,990],[975,991],[177,992],[727,993],[377,994],[751,995],[8,996],[437,997],[503,998],[643,999],[737,1000],[812,1001],[57,1002],[305,1003],[843,1004],[114,1005],[68,1006],[495,1007],[572,1008],[681,1009],[686,1010],[61,1011],[550,1012],[492,1013],[792,1014],[965,1015],[455,1016],[474,1017],[241,1018],[434,1019],[6,1020],[615,1021],[793,1022],[552,1023],[989,1024],[532,1025],[840,1026],[377,1027],[916,1028],[96,1029],[942,1030],[208,1031],[267,1032],[795,1033],[502,1034],[666,1035],[497,1036],[655,1037],[145,1038],[23,1039],[601,1040],[439,1041],[801,1042],[23,1043],[241,1044],[884,1045],[711,1046],[90,1047],[1023,1048],[672,1049],[1022,1050],[281,1051],[684,1052],[389,1053],[165,1054],[814,1055],[909,1056],[652,1057],[897,1058],[939,1059],[916,1060],[637,1061],[667,1062],[658,1063],[427,1064],[157,1065],[781,1066],[898,1067],[328,1068],[847,1069],[331,1070],[448,1071],[148,1072],[609,1073],[365,1074],[450,1075],[259,1076],[61,1077],[806,1078],[20,1079],[519,1080],[965,1081],[982,1082],[211,1083],[101,1084],[1010,1085],[20,1086],[92,1087],[849,1088],[760,1089],[526,1090],[544,1091],[1068,1092],[1087,1093],[1025,1094],[355,1095],[1075,1096],[142,1097],[404,1098],[182,1099],[628,1100],[684,1101],[101,1102],[158,1103],[66,1104],[1067,1105],[206,1106],[1015,1107],[1107,1108],[384,1109],[1057,1110]]";
		
		edges = ArrayUtil.str2int2DArray(s);
		long t1 = System.currentTimeMillis();
		results = instance.findMinHeightTrees(n, edges);
		long t2 = System.currentTimeMillis();
		System.out.println(results);
		System.out.println(String.format("total time=%,dms", (t2 - t1)));
	}
	
	
	public static class SolutionIII extends MinimumHeightTrees {
		private int minH = Integer.MAX_VALUE;
		public List<Integer> findMinHeightTrees(int n, int[][] edges) {
		    
		    Map<Integer, Set<Integer>> nodeNbs = new HashMap<>();
		    for (int[] edge : edges) {
		        int n1 = edge[0], n2 = edge[1];
		        add(n1, n2, nodeNbs);
		        add(n2, n1, nodeNbs);
		    }
		    
		    List<Integer> results = new ArrayList<>();
		    
	        for (int i = 0; i < n; i++) {
	            int h = height(i, 0, nodeNbs);
	            if (h >= 0 && h < minH) {
	                results.clear();
	                minH = h;
	            }
	            if (h == minH)
	                results.add(i);
	        }
	        return results;
		}
		
		private void add(int n1, int n2, Map<Integer, Set<Integer>> nodeNbs) {
		    Set<Integer> nbs = nodeNbs.get(n1);
		    if (nbs == null) {
		        nbs = new HashSet<>();
		        nodeNbs.put(n1, nbs);
		    }
		    nbs.add(n2);
		}
		
		private int height(int i, int h, Map<Integer, Set<Integer>> nodeNbs) {
		    if (++h > minH)
		        return -1;
		    Set<Integer> nbs = nodeNbs.get(i);
		    if (nbs != null) {
		        for (int nb : nbs) {
		            nodeNbs.get(nb).remove(i); // modify
		            int subH = height(nb, h, nodeNbs);
		            if (subH == -1 || subH > minH) {
		            	nodeNbs.get(nb).add(i);	// restore
		            	return -1;
		            }
		            h = Math.max(h,  subH);
		            nodeNbs.get(nb).add(i);	// restore
		        }
		    }
		    return h;
		}
	}
	
	
	// Solution II: TLE, Logic Correct
	// dfs with greedy
	public static class SolutionII extends MinimumHeightTrees {
		private int minH = Integer.MAX_VALUE;
		public List<Integer> findMinHeightTrees(int n, int[][] edges) {
	        if (n == 0)
	            return Collections.emptyList();
	        Map<Integer, List<Integer>> nodeNeighbors = new HashMap<>();
	        for (int[] edge : edges) {
	            int n1 = edge[0], n2 = edge[1];
	            addNeighbor(n1, n2, nodeNeighbors);
	            addNeighbor(n2, n1, nodeNeighbors);
	        }
	                
	        List<Integer> results = new LinkedList<>();
	        for (Integer node : nodeNeighbors.keySet()) {
	            Set<Integer> visited = new HashSet<Integer>();
	            visited.add(node);
	            int h = dfs(node, nodeNeighbors, visited);
	            if (h <= minH) {
	                if (h < minH) {
	                    minH = h;
	                    results.clear();
	                }
	                results.add(node);
	            }
	        }
	        return results;
	    }
	    
	    private void addNeighbor(Integer n1, Integer n2, Map<Integer, List<Integer>> nodeNeighbors) {
	        List<Integer> neighbors = nodeNeighbors.get(n1);
	        if (neighbors == null) {
	            neighbors = new LinkedList<>();
	            nodeNeighbors.put(n1, neighbors);
	        }
	        neighbors.add(n2);
	    }
	    
	    private int dfs(Integer node, Map<Integer, List<Integer>> nodeNeighbors, Set<Integer> visited) {
	        int h = Integer.MIN_VALUE;
	        List<Integer> neighbors = nodeNeighbors.get(node);
	        for (Integer neighbor : neighbors) {
	            if (visited.add(neighbor)) {
	                int subH = dfs(neighbor, nodeNeighbors, visited);
	                if (subH + 1 > minH)
	                    return Integer.MAX_VALUE; // greedy
	                else
	                    h = Math.max(h, subH + 1);
	            }
	        }
	        return h;
	    }
	}
	
	// Solution I: TLE, correct logic
	// bfs
	public static class SolutionI extends MinimumHeightTrees {
		public List<Integer> findMinHeightTrees(int n, int[][] edges) {
	        if (n == 0)
	            return Collections.emptyList();
	        Map<Integer, List<Integer>> nodeNeighbors = new HashMap<>();
	        for (int[] edge : edges) {
	            int n1 = edge[0], n2 = edge[1];
	            addNeighbor(n1, n2, nodeNeighbors);
	            addNeighbor(n2, n1, nodeNeighbors);
	        }
	        int minH = Integer.MAX_VALUE;
	        List<Integer> results = new LinkedList<>();
	        for (Integer node : nodeNeighbors.keySet()) {
	            List<Integer> list = new LinkedList<>();
	            list.add(node);
	            Set<Integer> visited = new HashSet<>();
	            visited.add(node);
	            int h = 0;
	            while (!list.isEmpty()) {
	                List<Integer> nextList = new LinkedList<>();
	                for (Integer e : list) {
	                    // all nodes should have neighbors
	                    List<Integer> neighbors = nodeNeighbors.get(e);
	                    for (Integer neighbor : neighbors) {
	                        if (visited.add(neighbor))
	                            nextList.add(neighbor);
	                    }
	                }
	                list = nextList;
	                h++;
	            }
	            if (h <= minH) {
	                if (h < minH) {
	                    minH = h;
	                    results.clear();
	                }
	                results.add(node);                
	            }
	        }
	        return results;
	    }
	    
	    private void addNeighbor(Integer n1, Integer n2, Map<Integer, List<Integer>> nodeNeighbors) {
	        List<Integer> neighbors = nodeNeighbors.get(n1);
	        if (neighbors == null) {
	            neighbors = new LinkedList<>();
	            nodeNeighbors.put(n1, neighbors);
	        }
	        neighbors.add(n2);
	    }
	}

}
